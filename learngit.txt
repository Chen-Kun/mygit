git init :把这个目录变成Git可以管理的仓库
git add :告诉Git，把文件添加到仓库
git commit :告诉Git，把文件提交到仓库 git commit -m "wrote a readme file"
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."
git status :命令可以让我们时刻掌握仓库当前的状态
git diff :顾名思义就是查看difference
git log :命令显示从最近到最远的提交日志,看得眼花缭乱的，可以试试加上--pretty=oneline参数
	$ git log --pretty=oneline
	1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL
	e475afc93c209a690c39c13a46716e8fa000c366 add distributed
	eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file
	你看到的一大串类似1094adb...的是commit id（版本号）
git reset --hard HEAD^
	在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^
	100个^比较容易数不过来，所以写成HEAD~100
	只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，
	找到那个append GPL的commit id是1094adb...，于是就可以指定回到未来的某个版本：
	$ git reset --hard 1094a
git reflog :用来记录你的每一次命令


工作区和暂存区:
	工作区就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
	还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
	


